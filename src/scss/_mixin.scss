/* mixin */


//line-heightの上下余白を取り除いたmarginを設定
@mixin lh-marginremove($font-size,$va,$base-margin){
  line-height:decimal-floor(strip-unit($va/$font-size),1);
  $newmargin : $base-margin - ($font-size * (strip-unit($va/$font-size) - 1));
  margin-top:$newmargin;
  margin-bottom:$newmargin;
}

//line-heightのみ設定
@mixin line-height($font-size,$va){
   line-height:decimal-floor((strip-unit($va/$font-size)),1);
}

/* くの字のマーク　*/
@mixin arrowMark($color,$width,$height){
  content: '';
  width: $width;
  height: $height;
  border: 0px;
  border-top: solid 2px $color;
  border-right: solid 2px $color;
  -ms-transform: rotate(45deg);
  -webkit-transform: rotate(45deg);
  transform: rotate(45deg);
}
//逆バージョン
@mixin arrowMarkReverse($color,$width,$height){
  content: '';
  width: $width;
  height: $height;
  border: 0px;
  border-top: solid 2px $color;
  border-right: solid 2px $color;
  -ms-transform: rotate(-135deg);
  -webkit-transform: rotate(-135deg);
  transform: rotate(-135deg);
}

//カンプの幅から、widthのパーセンテージを出す
@mixin SPWidth($designwidth,$content){
    width:decimal-floor(($designwidth/$content * 10 * 1%),0);
}

//フェードインアニメーション
@mixin fadein($duration,$timing-function,$delay,$iteration-count,$direction,$mode){

  animation-name:fadein;
  animation-duration:$duration; //アニメーション時間
  animation-timing-function: $timing-function; //アニメーションさせるイージング
  animation-delay:$delay; //アニメーション開始させる時間
  animation-iteration-count:$iteration-count; //繰り返し回数
  animation-direction:$direction; //往復処理をするかどうか
  animation-fill-mode: $mode; //アニメーション後のスタイルをどうするか

  @keyframes fadein {
    0% {opacity: 0}
    100% {opacity: 1}
  }
}

//hoverで震えるアニメ

@mixin shakeanime($maxmove,$mindeg,$maxdeg,$delay){

  animation: shake $delay infinite;

  @keyframes shake {
    0% {transform: translate(0px, 0px) rotateZ(0deg)}
    25% {transform: translate($maxmove, $maxmove) rotateZ($maxdeg)}
    50% {transform: translate(0px, $maxmove) rotateZ(0deg)}
    75% {transform: translate($maxmove, 0px) rotateZ($mindeg)}
    100% {transform: translate(0px, 0px) rotateZ(0deg)}
  } 
}




/* function */

// lh-marginremoveの数値設定版
@function lh-mpremove($font-size,$va,$base-margin){
  $newmargin : $base-margin - ($font-size * (strip-unit($va/$font-size) - 1));
  @return $newmargin;
}



//ptをpxに変換
@function ptconvertpx($pt){
  @return $pt*1.33;
}

//ptをremに変換
@function ptconvertrem($pt){
  @return decimal-floor(($pt * 1.33 / 10 * 1rem),1);
}



//ここまで自作

//小数点桁数制御

@function decimal-round($number, $digits: 0, $mode: round) {
  $n: 1;
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @if $digits > 0 {
    @for $i from 1 through $digits {
      $n: $n * 10;
    }
  }
  @if $mode == round {
    @return round($number * $n) / $n;
  } @else if $mode == ceil {
    @return ceil($number * $n) / $n;
  } @else if $mode == floor {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

@function decimal-ceil($number, $digits: 0) {
  @return decimal-round($number, $digits, ceil);
}

@function decimal-floor($number, $digits: 0) {
  @return decimal-round($number, $digits, floor);
}

// line-heightの単位を外す
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}